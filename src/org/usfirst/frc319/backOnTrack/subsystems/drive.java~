// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc319.MatthewAlan.subsystems;

import org.usfirst.frc319.MatthewAlan.RobotMap;
import org.usfirst.frc319.MatthewAlan.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.CANTalon.ControlMode;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class drive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar cANTalonLeftFollow = RobotMap.driveCANTalonLeftFollow;
    CANJaguar cANTalon4 = RobotMap.driveCANTalon4;
    CANJaguar cANTalonLeftLead = RobotMap.driveCANTalonLeftLead;
    CANJaguar cANTalonRightLead = RobotMap.driveCANTalonRightLead;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    
    public void Drive(){
    	
    	CANTalon2.changeControlMode(ControlMode.PercentVbus);
    	CANTalonRightFollow.changeControlMode(CANTalon.ControlMode.Follower);
    	CANTalonRightFollow.set(CANTalon2.getDeviceID());
    	
    	CANTalon1.changeControlMode(ControlMode.PercentVbus);
    	CANTalonLeftFollow.changeControlMode(ControlMode.Follower);
    	CANTalonLeftFollow.set(CANTalon1.getDeviceID());
    }
    	

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	 public void arcadeDrive(double moveValue, double rotateValue){
    		 double scaledMoveValue = 0;
    	    	double scaledRotateValue = 0;
    	    	
    	    	if (moveValue < 0) {
    	    		scaledMoveValue = -(moveValue * moveValue);    		
    	    	} else {
    	    		scaledMoveValue = (moveValue * moveValue);
    	    	}
    	    	if (rotateValue < 0) {
    	    		scaledRotateValue = -(rotateValue * rotateValue);
    	    	} else {
    	    		scaledRotateValue = (rotateValue * rotateValue);
    	    	}
    	    	robotDrive.arcadeDrive(scaledMoveValue* 0.75 , scaledRotateValue* 0.75); 
    }
}

